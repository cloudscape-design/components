{"version":3,"file":"type-utils.js","sourceRoot":"","sources":["../../src/components/type-utils.ts"],"names":[],"mappings":";;;;;;AAAA,qEAAqE;AACrE,sCAAsC;AACtC,4DAA4B;AAG5B,SAAgB,UAAU,CAAC,IAAa;IACtC,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE;QACjC,OAAO,KAAK,CAAC;KACd;IACD,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,oBAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;AAClE,CAAC;AALD,gCAKC;AAED,SAAgB,0BAA0B,CAAC,WAAuC;IAChF,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,EAAE,CAAC;KACX;IACD,MAAM,cAAc,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,oBAAE,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IACvG,IAAI,CAAC,cAAc,EAAE;QACnB,OAAO,EAAE,CAAC;KACX;IACD,MAAM,aAAa,GAAG,cAAc,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,oBAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IACxG,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,EAAE,CAAC;KACX;IACD,OAAO,aAAa,CAAC,WAAW,EAAE,CAAC;AACrC,CAAC;AAbD,gEAaC;AAED,SAAS,cAAc,CAAC,UAAkB;IACxC,OAAO,UAAU,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;AACxD,CAAC;AAED,SAAgB,aAAa,CAAC,IAAa,EAAE,OAAuB;IAClE,OAAO,cAAc,CACnB,OAAO,CAAC,YAAY,CAClB,IAAI,EACJ,SAAS,EACT,oBAAE,CAAC,eAAe,CAAC,uBAAuB;QACxC,oBAAE,CAAC,eAAe,CAAC,qBAAqB;QACxC,oBAAE,CAAC,eAAe,CAAC,kCAAkC,CACxD,CACF,CAAC;AACJ,CAAC;AAVD,sCAUC;AAED,SAAS,UAAU,CAAC,SAAqC;IACvD,OAAO,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC3B,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,IAAI;QACtB,IAAI,EAAE,oBAAE,CAAC,qBAAqB,CAAC,GAAG,CAAC,OAAO,CAAC;KAC5C,CAAC,CAAC,CAAC;AACN,CAAC;AAED,SAAgB,cAAc,CAAC,UAAuC,EAAE,WAAoB;IAC1F,OAAO;QACL,IAAI,EAAE,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,oBAAE,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS;QAC7E,IAAI,EAAE,UAAU,CAAC,oBAAE,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;KAC/C,CAAC;AACJ,CAAC;AALD,wCAKC;AAED,SAAgB,wBAAwB,CAAC,IAAgC,EAAE,QAAiC;;IAC1G,IAAI,IAAI,CAAC,WAAW,EAAE;QACpB,uEAAuE;QACvE,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9D,IAAI,oBAAE,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,EAAE;YAC/C,QAAQ,GAAG,gBAAgB,CAAC,IAAI,CAAC;SAClC;KACF;IAED,IAAI,CAAC,QAAQ,EAAE;QACb,OAAO,EAAE,CAAC;KACX;IAED,MAAM,SAAS,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5C,mCAAmC;IACnC,6HAA6H;IAC7H,IAAI,SAAS,CAAC,IAAI,KAAK,oBAAE,CAAC,UAAU,CAAC,UAAU,EAAE;QAC/C,OAAO,EAAE,CAAC;KACX;IACD,MAAM,WAAW,GAA8B,EAAE,CAAC;IAClD,IAAI,WAAW,GAAG,CAAC,CAAC;IACpB,KAAK,MAAM,KAAK,IAAI,SAAS,CAAC,WAAW,EAAE,EAAE;QAC3C,MAAM,IAAI,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QACjC,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACxB,WAAW,CAAC,WAAW,CAAC,GAAG,CAAC,MAAA,WAAW,CAAC,WAAW,CAAC,mCAAI,EAAE,CAAC,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;SACnF;QAED,IAAI,KAAK,CAAC,IAAI,KAAK,oBAAE,CAAC,UAAU,CAAC,QAAQ,EAAE;YACzC,WAAW,EAAE,CAAC;SACf;KACF;IACD,iCAAiC;IACjC,uHAAuH;IACvH,OAAO,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAgC,EAAE;QAC3E,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO,SAAS,CAAC;SAClB;QACD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC;QAClG,OAAO,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;IAC5D,CAAC,CAAC,CAAC;AACL,CAAC;AAxCD,4DAwCC;AAED,SAAgB,kBAAkB,CAAC,MAAiB;IAClD,MAAM,YAAY,GAAG,MAAM,CAAC,eAAe,EAAE,CAAC;IAC9C,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;QAC9C,MAAM,IAAI,KAAK,CAAC,oCAAoC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KACzE;IACD,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,2CAA2C,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KAChF;IACD,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AATD,gDASC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport ts from 'typescript';\nimport { ValueDescription } from './interfaces';\n\nexport function isOptional(type: ts.Type) {\n  if (!type.isUnionOrIntersection()) {\n    return false;\n  }\n  return !!type.types.find(t => t.flags & ts.TypeFlags.Undefined);\n}\n\nexport function unwrapNamespaceDeclaration(declaration: ts.Declaration | undefined) {\n  if (!declaration) {\n    return [];\n  }\n  const namespaceBlock = declaration.getChildren().find(node => node.kind === ts.SyntaxKind.ModuleBlock);\n  if (!namespaceBlock) {\n    return [];\n  }\n  const moduleContent = namespaceBlock.getChildren().find(node => node.kind === ts.SyntaxKind.SyntaxList);\n  if (!moduleContent) {\n    return [];\n  }\n  return moduleContent.getChildren();\n}\n\nfunction stripUndefined(typeString: string) {\n  return typeString.replace(/\\| undefined$/, '').trim();\n}\n\nexport function stringifyType(type: ts.Type, checker: ts.TypeChecker) {\n  return stripUndefined(\n    checker.typeToString(\n      type,\n      undefined,\n      ts.TypeFormatFlags.WriteArrayAsGenericType |\n        ts.TypeFormatFlags.UseFullyQualifiedType |\n        ts.TypeFormatFlags.UseAliasDefinedOutsideCurrentScope\n    )\n  );\n}\n\nfunction expandTags(extraTags: ReadonlyArray<ts.JSDocTag>) {\n  return extraTags.map(tag => ({\n    name: tag.tagName.text,\n    text: ts.getTextOfJSDocComment(tag.comment),\n  }));\n}\n\nexport function getDescription(docComment: Array<ts.SymbolDisplayPart>, declaration: ts.Node) {\n  return {\n    text: docComment.length > 0 ? ts.displayPartsToString(docComment) : undefined,\n    tags: expandTags(ts.getJSDocTags(declaration)),\n  };\n}\n\nexport function extractValueDescriptions(type: ts.UnionOrIntersectionType, typeNode: ts.TypeNode | undefined) {\n  if (type.aliasSymbol) {\n    // Traverse from \"variant: ButtonProps.Variant\" to \"type Variant = ...\"\n    const aliasDeclaration = extractDeclaration(type.aliasSymbol);\n    if (ts.isTypeAliasDeclaration(aliasDeclaration)) {\n      typeNode = aliasDeclaration.type;\n    }\n  }\n\n  if (!typeNode) {\n    return [];\n  }\n\n  const maybeList = typeNode.getChildren()[0];\n  // based on similar code in typedoc\n  // https://github.com/TypeStrong/typedoc/blob/6090b3e31471cea3728db1b03888bca5703b437e/src/lib/converter/symbols.ts#L406-L438\n  if (maybeList.kind !== ts.SyntaxKind.SyntaxList) {\n    return [];\n  }\n  const rawComments: Array<string | undefined> = [];\n  let memberIndex = 0;\n  for (const child of maybeList.getChildren()) {\n    const text = child.getFullText();\n    if (text.includes('/**')) {\n      rawComments[memberIndex] = (rawComments[memberIndex] ?? '') + child.getFullText();\n    }\n\n    if (child.kind !== ts.SyntaxKind.BarToken) {\n      memberIndex++;\n    }\n  }\n  // Array.from to fix sparse array\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_methods_and_empty_slots\n  return Array.from(rawComments).map((comment): ValueDescription | undefined => {\n    if (!comment) {\n      return undefined;\n    }\n    const systemTags = Array.from(comment.matchAll(/@awsuiSystem\\s+(\\w+)/g), ([_, system]) => system);\n    return systemTags.length > 0 ? { systemTags } : undefined;\n  });\n}\n\nexport function extractDeclaration(symbol: ts.Symbol) {\n  const declarations = symbol.getDeclarations();\n  if (!declarations || declarations.length === 0) {\n    throw new Error(`No declaration found for symbol: ${symbol.getName()}`);\n  }\n  if (declarations.length > 1) {\n    throw new Error(`Multiple declarations found for symbol: ${symbol.getName()}`);\n  }\n  return declarations[0];\n}\n"]}