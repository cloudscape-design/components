{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/components/index.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport fs from 'node:fs';\nimport { pascalCase } from 'change-case';\nimport pathe from 'pathe';\nimport { matcher } from 'micromatch';\n\nimport { buildComponentDefinition } from './component-definition';\nimport { extractDefaultValues, extractExports, extractFunctions, extractProps } from './extractor';\nimport type { ComponentDefinition } from './interfaces';\nimport { bootstrapTypescriptProject } from '../bootstrap/typescript';\nimport { extractDeclaration, getDescription } from './type-utils';\n\nfunction componentNameFromPath(componentPath: string) {\n  const dashCaseName = pathe.basename(pathe.dirname(componentPath));\n  return { dashCaseName, name: pascalCase(dashCaseName) };\n}\n\nexport interface DocumenterOptions {\n  tsconfigPath: string;\n  publicFilesGlob: string;\n  extraExports?: Record<string, Array<string>>;\n}\n\nexport interface WriteOptions {\n  outDir: string;\n}\n\nexport function writeComponentsDocumentation({ outDir, ...options }: WriteOptions & DocumenterOptions): void {\n  const definitions = documentComponents(options);\n  fs.mkdirSync(outDir, { recursive: true });\n  for (const definition of definitions) {\n    fs.writeFileSync(\n      pathe.join(outDir, definition.dashCaseName + '.js'),\n      `module.exports = ${JSON.stringify(definition, null, 2)};`\n    );\n  }\n  const indexContent = `module.exports = {\n    ${definitions\n      .map(definition => `${JSON.stringify(definition.dashCaseName)}:require('./${definition.dashCaseName}')`)\n      .join(',\\n')}\n  }`;\n  fs.writeFileSync(pathe.join(outDir, 'index.js'), indexContent);\n  fs.copyFileSync(require.resolve('./interfaces.d.ts'), pathe.join(outDir, 'interfaces.d.ts'));\n  fs.writeFileSync(\n    pathe.join(outDir, 'index.d.ts'),\n    `import { ComponentDefinition } from './interfaces';\nconst definitions: Record<string, ComponentDefinition>;\nexport default definitions;\n`\n  );\n}\n\nexport function documentComponents(options: DocumenterOptions): Array<ComponentDefinition> {\n  const program = bootstrapTypescriptProject(options.tsconfigPath);\n  const checker = program.getTypeChecker();\n\n  const isMatch = matcher(pathe.resolve(options.publicFilesGlob));\n\n  const sourceFiles = program.getSourceFiles().filter(file => isMatch(file.fileName));\n\n  if (sourceFiles.length === 0) {\n    throw new Error(`No files found matching ${options.publicFilesGlob}`);\n  }\n\n  return sourceFiles.map(sourceFile => {\n    const moduleSymbol = checker.getSymbolAtLocation(sourceFile);\n    const { name, dashCaseName } = componentNameFromPath(sourceFile.fileName);\n\n    // istanbul ignore next\n    if (!moduleSymbol) {\n      throw new Error(`Unable to resolve module: ${sourceFile.fileName}`);\n    }\n    const exportSymbols = checker.getExportsOfModule(moduleSymbol);\n    const { propsSymbol, componentSymbol } = extractExports(name, exportSymbols, checker, options?.extraExports ?? {});\n    const defaultValues = extractDefaultValues(componentSymbol, checker);\n    const componentDescription = getDescription(\n      componentSymbol.getDocumentationComment(checker),\n      extractDeclaration(componentSymbol)\n    );\n\n    return buildComponentDefinition(name, dashCaseName, propsSymbol, defaultValues, componentDescription, checker);\n  });\n}\n"]}