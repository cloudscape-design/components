{"version":3,"file":"code.js","sourceRoot":"","sources":["../../src/schema/code.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Reflection, ReflectionKind, DeclarationReflection, SignatureReflection, Type } from 'typedoc/dist/lib/models';\nimport {\n  isReflectionType,\n  isReferenceType,\n  isArrayType,\n  isIntrinsicType,\n  isStringLiteralType,\n  isUnionType,\n  isTupleType,\n  isTypeParameter,\n} from './types';\nimport { excludeUndefinedTypeFromUnion } from './utils';\n\nexport function buildFullName(reflection: Reflection): string {\n  const result = [reflection.name];\n  while (reflection.parent && reflection.parent.kind !== ReflectionKind.Module) {\n    reflection = reflection.parent;\n    result.push(reflection.name);\n  }\n  return result.reverse().join('.');\n}\n\nexport function buildCallSignature(signature: SignatureReflection, enclose = false): string {\n  const parameters = signature.parameters\n    ?.map(parameter => `${parameter.name}: ${buildType(parameter.type)}`)\n    .join(', ');\n  const call = `(${parameters ?? ''}) => ${buildType(signature.type)}`;\n  return enclose ? `(${call})` : call;\n}\n\nexport function buildType(type?: Type, enclose = false): string {\n  if (type) {\n    if (isReflectionType(type)) {\n      const reflected = type.declaration;\n      if (reflected.signatures && reflected.signatures[0]) {\n        return buildCallSignature(reflected.signatures[0], enclose);\n      }\n      return buildType(type.declaration.type);\n    }\n    if (isReferenceType(type)) {\n      let name = (type.reflection && buildFullName(type.reflection)) ?? type.name;\n      if (type.typeArguments) {\n        name += `<${type.typeArguments.map(type => buildType(type)).join(', ')}>`;\n      }\n      return name;\n    }\n    if (isArrayType(type)) {\n      const elementType = buildType(type.elementType);\n      return `Array<${elementType}>`;\n    }\n    if (isIntrinsicType(type) || isTypeParameter(type)) {\n      return type.name;\n    }\n    if (isStringLiteralType(type)) {\n      return JSON.stringify(type.value);\n    }\n    if (isUnionType(type)) {\n      const defined = excludeUndefinedTypeFromUnion(type);\n      return defined\n        .map(type => buildType(type, defined.length > 1))\n        .sort()\n        .join(' | ');\n    }\n    if (isTupleType(type)) {\n      return `[${[type.elements.map(posType => buildType(posType))].join(', ')}]`;\n    }\n    return type.type;\n  }\n  return 'unknown';\n}\n\nexport function buildNodeDescription(node: Reflection): string | undefined {\n  if (node.comment) {\n    return node.comment.text ? `${node.comment.shortText}\\n${node.comment.text}` : node.comment.shortText;\n  }\n}\n\nexport function buildDeclarationDescription(declaration: DeclarationReflection): string | undefined {\n  if (declaration.comment) {\n    return buildNodeDescription(declaration);\n  }\n  const signatureWithComment = declaration.signatures?.find(signature => signature.comment);\n  if (signatureWithComment) {\n    return buildNodeDescription(signatureWithComment);\n  }\n}\n"]}