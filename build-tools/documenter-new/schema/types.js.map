{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/schema/types.ts"],"names":[],"mappings":";;;AAcA,SAAgB,mBAAmB,CAAC,IAAW;IAC7C,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,eAAe,CAAC;AAC7D,CAAC;AAFD,kDAEC;AAED,SAAgB,eAAe,CAAC,IAAW;IACzC,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC;AACzD,CAAC;AAFD,0CAEC;AAED,SAAgB,eAAe,CAAC,IAAW;IACzC,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,WAAW,CAAC;AACzD,CAAC;AAFD,0CAEC;AAED,SAAgB,gBAAgB,CAAC,IAAW;IAC1C,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,CAAC;AAC1D,CAAC;AAFD,4CAEC;AAED,SAAgB,WAAW,CAAC,IAAW;IACrC,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;AACrD,CAAC;AAFD,kCAEC;AAED,SAAgB,WAAW,CAAC,IAAW;IACrC,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;AACrD,CAAC;AAFD,kCAEC;AAED,SAAgB,eAAe,CAAC,IAAW;IACzC,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,eAAe,CAAC;AAC7D,CAAC;AAFD,0CAEC;AAED,SAAgB,WAAW,CAAC,IAAW;IACrC,OAAO,IAAI,KAAK,SAAS,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC;AACrD,CAAC;AAFD,kCAEC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport {\n  ArrayType,\n  IntrinsicType,\n  ReferenceType,\n  ReflectionType,\n  StringLiteralType,\n  TupleType,\n  Type,\n  TypeParameterType,\n  UnionType,\n} from 'typedoc/dist/lib/models';\n\nexport function isStringLiteralType(type?: Type): type is StringLiteralType {\n  return type !== undefined && type.type === 'stringLiteral';\n}\n\nexport function isReferenceType(type?: Type): type is ReferenceType {\n  return type !== undefined && type.type === 'reference';\n}\n\nexport function isIntrinsicType(type?: Type): type is IntrinsicType {\n  return type !== undefined && type.type === 'intrinsic';\n}\n\nexport function isReflectionType(type?: Type): type is ReflectionType {\n  return type !== undefined && type.type === 'reflection';\n}\n\nexport function isArrayType(type?: Type): type is ArrayType {\n  return type !== undefined && type.type === 'array';\n}\n\nexport function isUnionType(type?: Type): type is UnionType {\n  return type !== undefined && type.type === 'union';\n}\n\nexport function isTypeParameter(type?: Type): type is TypeParameterType {\n  return type !== undefined && type.type === 'typeParameter';\n}\n\nexport function isTupleType(type?: Type): type is TupleType {\n  return type !== undefined && type.type === 'tuple';\n}\n"]}