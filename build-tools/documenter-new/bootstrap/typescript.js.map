{"version":3,"file":"typescript.js","sourceRoot":"","sources":["../../src/bootstrap/typescript.ts"],"names":[],"mappings":";;;;;;AAAA,qEAAqE;AACrE,sCAAsC;AACtC,4DAA4B;AAC5B,kDAA0B;AAE1B,SAAS,gBAAgB,CAAC,WAAqC;IAC7D,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;QACpC,MAAM,OAAO,GAAG,oBAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QAC9E,IAAI,UAAU,CAAC,IAAI,EAAE;YACnB,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,oBAAE,CAAC,6BAA6B,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,KAAM,CAAC,CAAC;YACjG,OAAO,CAAC,KAAK,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,GAAG,CAAC,IAAI,SAAS,GAAG,CAAC,MAAM,OAAO,EAAE,CAAC,CAAC;SACzF;aAAM;YACL,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SACxB;KACF;AACH,CAAC;AAED,SAAS,YAAY,CAAC,YAAoB;IACxC,MAAM,UAAU,GAAG,oBAAE,CAAC,cAAc,CAAC,YAAY,EAAE,oBAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACpE,IAAI,UAAU,CAAC,KAAK,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;KACjD;IACD,MAAM,MAAM,GAAG,oBAAE,CAAC,0BAA0B,CAAC,UAAU,CAAC,MAAM,EAAE,oBAAE,CAAC,GAAG,EAAE,eAAK,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;IACrG,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;KAClD;IACD,mFAAmF;IACnF,MAAM,CAAC,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;IACnC,OAAO,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;IACtC,OAAO,MAAM,CAAC;AAChB,CAAC;AAED,SAAgB,0BAA0B,CAAC,YAAoB;IAC7D,MAAM,QAAQ,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;IAC5C,MAAM,OAAO,GAAG,oBAAE,CAAC,aAAa,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;IAEvE,MAAM,WAAW,GAAG,oBAAE,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;IACtD,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1B,gBAAgB,CAAC,WAAW,CAAC,CAAC;QAC9B,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;KACvC;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AAXD,gEAWC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport ts from 'typescript';\nimport pathe from 'pathe';\n\nfunction printDiagnostics(diagnostics: readonly ts.Diagnostic[]): void {\n  for (const diagnostic of diagnostics) {\n    const message = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n    if (diagnostic.file) {\n      const { line, character } = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start!);\n      console.error(`${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);\n    } else {\n      console.error(message);\n    }\n  }\n}\n\nfunction loadTSConfig(tsconfigPath: string): ts.ParsedCommandLine {\n  const configFile = ts.readConfigFile(tsconfigPath, ts.sys.readFile);\n  if (configFile.error) {\n    throw new Error('Failed to read tsconfig.json');\n  }\n  const config = ts.parseJsonConfigFileContent(configFile.config, ts.sys, pathe.dirname(tsconfigPath));\n  if (config.errors.length > 0) {\n    throw new Error('Failed to parse tsconfig.json');\n  }\n  // this prints a warning that incremental mode is not supported in programmatic API\n  config.options.incremental = false;\n  delete config.options.tsBuildInfoFile;\n  return config;\n}\n\nexport function bootstrapTypescriptProject(tsconfigPath: string) {\n  const tsconfig = loadTSConfig(tsconfigPath);\n  const program = ts.createProgram(tsconfig.fileNames, tsconfig.options);\n\n  const diagnostics = ts.getPreEmitDiagnostics(program);\n  if (diagnostics.length > 0) {\n    printDiagnostics(diagnostics);\n    throw new Error('Compilation failed');\n  }\n\n  return program;\n}\n"]}