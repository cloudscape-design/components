{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/bootstrap/index.ts"],"names":[],"mappings":";AAAA,qEAAqE;AACrE,sCAAsC;;;AAEtC,qCAA8F;AAC9F,2CAAqC;AACrC,iCAAgC;AAEhC,SAAgB,gBAAgB,CAC9B,OAAqC,EACrC,aAAsB,EACtB,wBAAmC;IAEnC,MAAM,GAAG,GAAG,IAAI,qBAAW,EAAE,CAAC;IAC9B,GAAG,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,wBAAc,EAAE,CAAC,CAAC;IAE5C,MAAM,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IACzD,IAAI,SAAS,EAAE;QACb,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;KACxD;IAED,IAAI,wBAAwB,aAAxB,wBAAwB,uBAAxB,wBAAwB,CAAE,MAAM,EAAE;QACpC,UAAU,CAAC,IAAI,CAAC,GAAG,wBAAwB,CAAC,CAAC;KAC9C;IAED,MAAM,kBAAkB,GAAG,WAAW,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAClE,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAC9C;IAED,MAAM,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAChD,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;KAC9C;IAED,OAAO,OAAO,CAAC;AACjB,CAAC;AA5BD,4CA4BC;AAED,SAAS,WAAW,CAAC,UAAoB,EAAE,aAAsB;IAC/D,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,UAAU,CAAC;KACnB;IACD,MAAM,OAAO,GAAG,IAAA,oBAAO,EAAC,IAAA,eAAO,EAAC,aAAa,CAAC,CAAC,CAAC;IAChD,OAAO,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAClD,CAAC","sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { TypeDocAndTSOptions, Application, TSConfigReader, ProjectReflection } from 'typedoc';\nimport { matcher } from 'micromatch';\nimport { resolve } from 'pathe';\n\nexport function bootstrapProject(\n  options: Partial<TypeDocAndTSOptions>,\n  filteringGlob?: string,\n  additionalInputFilePaths?: string[]\n): ProjectReflection {\n  const app = new Application();\n  app.options.addReader(new TSConfigReader());\n\n  const { inputFiles, hasErrors } = app.bootstrap(options);\n  if (hasErrors) {\n    throw new Error('Errors during parsing configuration');\n  }\n\n  if (additionalInputFilePaths?.length) {\n    inputFiles.push(...additionalInputFilePaths);\n  }\n\n  const filteredInputFiles = filterFiles(inputFiles, filteringGlob);\n  if (!filteredInputFiles.length) {\n    throw new Error('No input files to convert');\n  }\n\n  const project = app.convert(filteredInputFiles);\n  if (!project) {\n    throw new Error('Project generation failed');\n  }\n\n  return project;\n}\n\nfunction filterFiles(inputFiles: string[], filteringGlob?: string): string[] {\n  if (!filteringGlob) {\n    return inputFiles;\n  }\n  const isMatch = matcher(resolve(filteringGlob));\n  return inputFiles.filter(file => isMatch(file));\n}\n"]}