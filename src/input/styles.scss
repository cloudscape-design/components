/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/

@use '../internal/styles' as styles;
@use '../internal/styles/tokens' as awsui;
@use '../internal/styles/foundation' as foundation;
@use '../internal/generated/custom-css-properties/index.scss' as custom-props;

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
    // Chrome allows to select the placeholder on drag, if drag starts and
    // ends in surrounding flex container
    user-select: none;
  }

  &::-moz-placeholder {
    @content;
    opacity: 1;
  }

  &:-moz-placeholder {
    @content;
    opacity: 1;
  }
}

.root {
  /* used in test-utils for component to distinguish input from other input-like components, for example autosuggest */
}

.input {
  @include styles.styles-reset;
  padding-block: styles.$control-padding-vertical;
  padding-inline: styles.$control-padding-horizontal;
  color: var(#{custom-props.$styleColorDefault}, awsui.$color-text-body-default);
  inline-size: 100%;
  cursor: text;
  box-sizing: border-box;
  background-color: var(#{custom-props.$styleBackgroundDefault}, awsui.$color-background-input-default);
  border-start-start-radius: styles.$control-border-radius;
  border-start-end-radius: styles.$control-border-radius;
  border-end-start-radius: styles.$control-border-radius;
  border-end-end-radius: styles.$control-border-radius;

  border-block: awsui.$border-width-field solid
    var(#{custom-props.$styleBorderColorDefault}, awsui.$color-border-input-default);
  border-inline: awsui.$border-width-field solid
    var(#{custom-props.$styleBorderColorDefault}, awsui.$color-border-input-default);

  box-shadow: var(#{custom-props.$styleBoxShadowDefault});

  @include styles.font-body-m;
  block-size: awsui.$size-vertical-input;

  &.input-readonly {
    @include styles.form-readonly-element(
      $background-color: var(
          #{custom-props.$styleBackgroundReadonly},
          var(#{custom-props.$styleBackgroundDefault}, awsui.$color-background-input-default)
        ),
      $border-color: var(
          #{custom-props.$styleBorderColorReadonly},
          var(#{custom-props.$styleBorderColorDefault}, awsui.$color-border-input-disabled)
        )
    );
    color: var(
      #{custom-props.$styleColorReadonly},
      var(#{custom-props.$styleColorDefault}, awsui.$color-text-body-default)
    );
    box-shadow: var(#{custom-props.$styleBoxShadowReadonly});
  }

  @include placeholder {
    @include styles.form-placeholder(
      $color: var(#{custom-props.$stylePlaceholderColor}, awsui.$color-text-input-placeholder),
      $font-size: var(#{custom-props.$stylePlaceholderFontSize}),
      $font-style: var(#{custom-props.$stylePlaceholderFontStyle}, italic),
      $font-weight: var(#{custom-props.$stylePlaceholderFontWeight})
    );
  }

  &:focus {
    @include styles.form-focus-element(
      $border-color: var(#{custom-props.$styleBorderColorFocus}, awsui.$color-border-input-focused),
      $box-shadow: var(#{custom-props.$styleBoxShadowFocus}, foundation.$box-shadow-focused-light)
    );
    color: var(#{custom-props.$styleColorFocus}, awsui.$color-text-body-default);
    background-color: var(#{custom-props.$styleBackgroundFocus}, awsui.$color-background-input-default);
  }

  &:disabled {
    @include styles.form-disabled-element(
      $background-color: var(#{custom-props.$styleBackgroundDisabled}, awsui.$color-background-input-disabled),
      $border-color: var(#{custom-props.$styleBorderColorDisabled}, awsui.$color-border-input-disabled),
      $color: var(#{custom-props.$styleColorDisabled}, awsui.$color-text-input-disabled),
      $cursor: default
    );
    box-shadow: var(#{custom-props.$styleBoxShadowDisabled});
    @include placeholder {
      @include styles.form-placeholder-disabled;
    }
  }

  &:invalid {
    // discard built-in invalid styles, customers should use `invalid` property only (AWSUI-3947)
    box-shadow: none;
  }

  &:hover:not(:focus):not(:disabled):not(:read-only) {
    border-color: var(
      #{custom-props.$styleBorderColorHover},
      var(#{custom-props.$styleBorderColorDefault}, awsui.$color-border-input-default)
    );
    color: var(
      #{custom-props.$styleColorHover},
      var(#{custom-props.$styleBorderColorDefault}, awsui.$color-text-body-default)
    );
    background-color: var(
      #{custom-props.$styleBackgroundHover},
      var(#{custom-props.$styleBackgroundDefault}, awsui.$color-background-input-default)
    );
    box-shadow: var(#{custom-props.$styleBoxShadowHover}, #{custom-props.$styleBoxShadowDefault});
  }

  &.input-invalid {
    @include styles.form-invalid-control();
    &.input-has-icon-left {
      padding-inline-start: calc(
        #{styles.$control-icon-horizontal-padding} -
          (#{styles.$invalid-control-left-border} - #{awsui.$border-width-field})
      );
    }
  }

  &.input-warning {
    @include styles.form-warning-control();
    &.input-has-icon-left {
      padding-inline-start: calc(
        #{styles.$control-icon-horizontal-padding} -
          (#{styles.$invalid-control-left-border} - #{awsui.$border-width-field})
      );
    }
  }

  &.input-type-search {
    box-sizing: border-box; // Overrides the [type='search'] CSS from normalize
    -webkit-appearance: none;

    &::-webkit-search-decoration {
      // Remove extra space for default Safari browser search icon
      -webkit-appearance: none;
    }

    &::-webkit-search-cancel-button {
      display: none;
    }
  }
  &.input-has-icon-left {
    padding-inline-start: styles.$control-icon-horizontal-padding;
  }
  &.input-has-icon-right {
    padding-inline-end: styles.$control-icon-horizontal-padding;
  }
  &.input-has-no-border-radius {
    border-start-start-radius: awsui.$border-radius-dropdown;
    border-start-end-radius: awsui.$border-radius-dropdown;
    border-end-start-radius: awsui.$border-radius-dropdown;
    border-end-end-radius: awsui.$border-radius-dropdown;
  }
}

.input-container {
  display: flex;
  position: relative;
}

.input-icon-left {
  position: absolute;
  pointer-events: none;
  inset-inline-start: styles.$control-icon-horizontal-offset;
  inset-block-start: styles.$control-icon-vertical-offset;
}

.input-icon-right {
  position: absolute;
  inset-block-start: calc(#{styles.$control-icon-vertical-offset} - #{awsui.$space-xxxs});
  inset-inline-end: calc(#{styles.$control-icon-horizontal-offset} - #{awsui.$space-xxs});
}

.input-button-right {
  /* used in test-utils */
}
