$darkModeProperties: (
  'background-color',
  'background-image',
  'border-color',
  'box-shadow',
  'color',
  'fill',
  'outline',
);

@mixin dark-mode-permutations($property) {
  --theme-#{$property}: var(--theme-#{$property}-dark-mode);
  --theme-#{$property}-active: var(--theme-#{$property}-dark-mode-active);
  --theme-#{$property}-checked: var(--theme-#{$property}-dark-mode-checked);
  --theme-#{$property}-disabled: var(--theme-#{$property}-dark-mode-disabled);
  --theme-#{$property}-empty: var(--theme-#{$property}-dark-mode-empty);
  --theme-#{$property}-error: var(--theme-#{$property}-dark-mode-error);
  --theme-#{$property}-hover: var(--theme-#{$property}-dark-mode-hover);
  --theme-#{$property}-info: var(--theme-#{$property}-dark-mode-info);
  --theme-#{$property}-indeterminate: var(--theme-#{$property}-dark-mode-indeterminate);
  --theme-#{$property}-read-only: var(--theme-#{$property}-dark-mode-read-only);
  --theme-#{$property}-success: var(--theme-#{$property}-dark-mode-success);
  --theme-#{$property}-warning: var(--theme-#{$property}-dark-mode-warning);
}

.theme {
  display: contents;
}

:global(.awsui-dark-mode) .theme-dark-mode {
  display: contents;

  @each $property in $darkModeProperties {
    &.has-#{$property} {
      @include dark-mode-permutations($property);
    }
  }
}

.theme-reset,
:global(.awsui-dark-mode) .theme-reset {
  display: contents;
}
