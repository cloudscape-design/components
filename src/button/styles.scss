/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/

@use 'sass:map';
@use '../internal/styles' as styles;
@use '../internal/styles/tokens' as awsui;
@use '@cloudscape-design/component-toolkit/internal/focus-visible' as focus-visible;
@use './constants' as constants;

@mixin adjust-for-variant($variant) {
  background: var(--theme-background-color, map.get($variant, 'default-background'));
  color: var(--theme-color, #{map.get($variant, 'default-color')});
  border-color: var(--theme-border-color, #{map.get($variant, 'default-border-color')});
  border-block-width: map.get($variant, 'border-width');
  border-inline-width: map.get($variant, 'border-width');
  position: relative;
  text-decoration: none;
  padding-block: map.get($variant, 'padding');
  padding-inline: map.get($variant, 'padding');
  font-weight: map.get($variant, 'font-weight');

  &:hover {
    background: var(--theme-background-color-hover, map.get($variant, 'hover-background'));
    color: var(--theme-color-hover, map.get($variant, 'hover-color'));
    border-color: var(--theme-border-color-hover, map.get($variant, 'hover-border-color'));
    text-decoration: none;
  }

  &:active {
    background: var(--theme-background-color-active, map.get($variant, 'active-background'));
    color: var(--theme-color-active, map.get($variant, 'active-color'));
    border-color: var(--theme-border-color-active, map.get($variant, 'active-border-color'));
  }

  &.disabled {
    background: var(--theme-background-color-disabled, map.get($variant, 'disabled-background'));
    border-color: var(--theme-border-color-disabled, map.get($variant, 'disabled-border-color'));
    color: var(--theme-color-disabled, map.get($variant, 'disabled-color'));
    text-decoration: none;
    cursor: auto;
  }
}

.content {
  /* used in test-utils */
}

.button {
  @include styles.styles-reset;
  @include styles.text-wrapping;
  @include styles.font-button;
  letter-spacing: awsui.$font-button-letter-spacing;
  border-start-start-radius: var(--theme-border-radius, awsui.$border-radius-button);
  border-start-end-radius: var(--theme-border-radius, awsui.$border-radius-button);
  border-end-start-radius: var(--theme-border-radius, awsui.$border-radius-button);
  border-end-end-radius: var(--theme-border-radius, awsui.$border-radius-button);
  border-block: var(--theme-border-width, styles.$control-border-width) solid;
  border-inline: var(--theme-border-width, styles.$control-border-width) solid;
  padding-block: var(--theme-padding-block, styles.$control-padding-vertical);
  padding-inline: var(--theme-padding-inline, awsui.$space-button-horizontal);
  line-height: var(--theme-line-height);
  display: inline-block; // for <a> as a button
  text-decoration: none;
  cursor: pointer;
  font-size: var(--theme-font-size, awsui.$font-size-body-m);

  @each $variant in map.keys(constants.$variants) {
    &.variant-#{$variant} {
      @include adjust-for-variant(map.get(constants.$variants, $variant));
    }
  }

  &:focus {
    outline: none;
    text-decoration: none;
  }

  @include focus-visible.when-visible {
    @include styles.focus-highlight(awsui.$space-button-focus-outline-gutter);

    &.variant-icon,
    &.variant-modal-dismiss,
    &.variant-flashbar-icon {
      @include styles.focus-highlight(
        (
          'vertical': awsui.$space-button-icon-focus-outline-gutter-vertical,
          'horizontal': awsui.$space-button-focus-outline-gutter,
        )
      );
    }

    &.variant-inline-icon,
    &.variant-inline-icon-pointer-target {
      @include styles.focus-highlight(awsui.$space-button-inline-icon-focus-outline-gutter);
    }
  }

  &.button-no-text {
    padding-inline-start: awsui.$space-button-icon-only-horizontal;
    padding-inline-end: awsui.$space-button-icon-only-horizontal;
  }

  &.button-no-wrap {
    white-space: nowrap;
  }

  &.full-width {
    inline-size: 100%;
    text-align: center;
  }

  &.variant-icon,
  &.variant-inline-icon,
  &.variant-inline-icon-pointer-target,
  &.variant-flashbar-icon {
    // Icon has vertical padding, but no horizontal, we need to conpensate this
    // in order to have equal height and width
    padding-inline: awsui.$space-xxs;
  }

  &.variant-modal-dismiss {
    padding-block: awsui.$space-button-modal-dismiss-vertical;
    padding-inline: awsui.$space-xxs;
    margin-inline-end: calc(-1 * #{awsui.$space-xxs});
  }

  &.variant-inline-icon {
    padding-block: 0;
    border-block: 0;
    border-inline: 0;
  }

  &.variant-inline-icon-pointer-target {
    padding-block: awsui.$space-xxxs;
    border-block: 0;
    border-inline: 0;
  }

  > .icon-left {
    color: var(--theme-fill);
    position: relative;
    // margin-left was breaking layout on firefox
    inset-inline-start: calc(-1 * #{awsui.$space-xxs});
    margin-inline-end: awsui.$space-xxs;
  }

  > .icon-right {
    color: var(--theme-fill);
    position: relative;
    // margin-right was breaking layout on firefox
    inset-inline-end: calc(-1 * #{awsui.$space-xxs});
    margin-inline-start: awsui.$space-xxs;
  }

  &:hover > :is(.icon-left, .icon-right) {
    color: var(--theme-fill-hover);
  }

  &:active > :is(.icon-left, .icon-right) {
    color: var(--theme-fill-active);
  }

  &.variant-inline-link {
    > .icon-left {
      inset-inline-start: 0;
      margin-inline-end: awsui.$space-xs;
    }

    > .icon-right {
      inset-inline-end: 0;
      margin-inline-start: awsui.$space-xs;
    }
  }

  &.button-no-text > .icon {
    margin-inline-start: auto;
    margin-inline-end: auto;
    inset-inline: 0;
  }
}

.link.disabled:not(.disabled-with-reason) {
  pointer-events: none;
}
