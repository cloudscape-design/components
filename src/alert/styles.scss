/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/

@use 'sass:map';
@use '../internal/styles/tokens' as awsui;
@use '../internal/styles' as styles;
@use '@cloudscape-design/component-toolkit/internal/focus-visible' as focus-visible;

@use './motion';

.root {
  @include styles.styles-reset;
  @include styles.text-flex-wrapping;
  display: block;

  &.hidden {
    display: none;
  }
}

.alert {
  @include styles.styles-reset;
  position: relative;
  display: grid;
  grid-template-columns: 1fr;
  border-block: var(--theme-border-width, awsui.$border-width-alert) solid;
  border-inline: var(--theme-border-width, awsui.$border-width-alert) solid;
  border-start-start-radius: var(--theme-border-radius, awsui.$border-radius-alert);
  border-start-end-radius: var(--theme-border-radius, awsui.$border-radius-alert);
  border-end-start-radius: var(--theme-border-radius, awsui.$border-radius-alert);
  border-end-end-radius: var(--theme-border-radius, awsui.$border-radius-alert);
  color: var(--theme-color, awsui.$color-text-body-default);
  font-size: var(--theme-font-size, awsui.$font-size-body-m);
  padding-block: var(--theme-padding-block, awsui.$space-alert-vertical);
  padding-inline: var(--theme-padding-inline, awsui.$space-alert-horizontal);

  &.with-dismiss,
  &.with-action {
    grid-template-columns: 1fr auto;
  }
  &.with-action.with-dismiss {
    grid-template-columns: 1fr auto auto;
  }
  // Below the breakpoint, arrange actions below the content
  &.breakpoint-default.with-action {
    grid-template-columns: 1fr auto;
  }
  &.breakpoint-default:not(.with-dismiss) {
    grid-template-columns: 1fr;
  }
}

.hidden {
  display: none;
}
// visibly hidden, but focusable
.initial-hidden {
  overflow: hidden;
  block-size: 0;
}

.header,
.header-replacement {
  font-weight: styles.$font-weight-bold;
}

.action {
  white-space: nowrap;
  margin-inline-start: awsui.$space-alert-action-left;
}

.action-slot,
.action-button {
  /* used in test-utils */
}

.alert-focus-wrapper {
  display: grid;
  grid-template-columns: min-content auto;

  &:focus {
    outline: none;
  }
  @include focus-visible.when-visible {
    @include styles.focus-highlight(awsui.$space-button-focus-outline-gutter);
  }
}

.text {
  min-inline-size: 0;
  // To account for vertical misalignment due to button borders
  padding-block: awsui.$border-width-alert;
  padding-inline: 0;
  margin-block: awsui.$space-scaled-xxs;
  margin-inline: awsui.$space-xxs;
  &.icon {
    margin-inline-start: 0;
  }
  &.message {
    margin-inline-start: var(--theme-gap-inline, 0px);
    margin-inline-end: awsui.$space-alert-message-right;
  }
}

.breakpoint-default {
  // Below the breakpoint, arrange actions below the content
  > .action {
    grid-row: 2;
    margin-block-end: awsui.$space-xxs;
  }

  // Indent actions according to the size of the alert icon
  &.icon-size-medium > .action {
    margin-inline-start: calc(#{awsui.$size-icon-medium} + #{awsui.$space-xs});
  }
  &.icon-size-big > .action {
    margin-inline-start: calc(#{awsui.$size-icon-big} + #{awsui.$space-xs});
  }
  &.icon-size-normal > .action {
    margin-inline-start: calc(#{awsui.$size-icon-normal} + #{awsui.$space-xs});
  }
}

.content,
.content-replacement {
  /* used in test-utils */
  margin-block-start: var(--theme-gap-block, 0px);
}

.dismiss {
  margin-inline-end: calc(-1 * #{awsui.$space-xxs});
  margin-inline-start: awsui.$space-s;
}

.dismiss-button {
  /* used in test-utils */
}

$_border-colors: (
  'error': awsui.$color-border-status-error,
  'warning': awsui.$color-border-status-warning,
  'success': awsui.$color-border-status-success,
  'info': awsui.$color-border-status-info,
);

$_background-colors: (
  'error': awsui.$color-background-status-error,
  'warning': awsui.$color-background-status-warning,
  'success': awsui.$color-background-status-success,
  'info': awsui.$color-background-status-info,
);

$_text-colors: (
  'error': awsui.$color-text-status-error,
  'warning': awsui.$color-text-status-warning,
  'success': awsui.$color-text-status-success,
  'info': awsui.$color-text-status-info,
);

@each $type in map.keys($_text-colors) {
  .type-#{$type} {
    border-color: var(--theme-border-color, #{map.get($_border-colors, $type)});
    background-color: var(--theme-background-color, #{map.get($_background-colors, $type)});
    > .alert-focus-wrapper > .icon {
      color: var(--theme-fill, #{map.get($_text-colors, $type)});
    }
  }
}
