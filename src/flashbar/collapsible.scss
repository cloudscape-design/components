/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/
@use '../internal/generated/custom-css-properties/index.scss' as custom-props;
@use '../internal/hooks/focus-visible' as focus-visible;
@use '../internal/styles/tokens' as awsui;
@use '../internal/styles' as styles;
@use '../internal/styles/typography' as typography;
@use './collapsible.motion';

$collapsed-item-overflow: 10px;

.stack {
  $notification-bar-horizontal-margin: 3 * $collapsed-item-overflow;
  display: grid;
  grid-template-columns: $notification-bar-horizontal-margin 1fr $notification-bar-horizontal-margin;
}

.stack > .expanded {
  grid-column: 1 / 4;
}

@mixin stacked-flash-z-index {
  // The first item should have the highest z index than the second item, and so forth...
  z-index: calc(var(#{custom-props.$flashbarStackDepth}) - var(#{custom-props.$flashbarStackIndex}));
}

/*
The collapsed stack is a dynamic grid that creates the necessary number of
rows and columns based on the number of items passed to CSS via the
`flashbarStackDepth` custom property. Assuming there are three flashbar items,
the grid layout will be:

[item 1 start] [10px] [10px] [fractional unit] [10px] [10px] [item 1 end]
[10px] [item 2 start] [10px] [fractional unit] [10px] [item 2 end] [10px]
[10px] [10px] [item 3 start] [fractional unit] [item 3 end] [10px] [10px]
*/

.stack > .collapsed {
  display: grid;
  grid-column: 1 / 4;
  grid-template-columns:
    repeat(var(#{custom-props.$flashbarStackDepth}), $collapsed-item-overflow)
    1fr
    repeat(var(#{custom-props.$flashbarStackDepth}), $collapsed-item-overflow);
  row-gap: 8px;
  z-index: 0;

  > .item {
    // Each item will have a unique custom property `flashbarStackIndex`
    // Add +1 is because the array is indexed at zero but grid positions are indexed at 1.
    grid-column-start: calc(var(#{custom-props.$flashbarStackIndex}) + 1);

    // Add +1 to include the fractional unit in the column count
    // Add +1 because the array indexed at zero but grid positions at indexed at 1.
    grid-column-end: calc(
      var(#{custom-props.$flashbarStackDepth}) * 2 + 1 - var(#{custom-props.$flashbarStackIndex}) + 1
    );
    grid-row-start: 1;
    grid-row-end: calc(var(#{custom-props.$flashbarStackIndex}) + 2);

    @include stacked-flash-z-index;
  }

  > .item:not(:first-of-type) {
    align-self: end;
    /* Give placeholder elements in the stacked state the height of a notification
       with one single line of text.
       This makes them look better during the collapse animation, in which they are already empty.
     */
    min-height: calc(
      #{awsui.$font-body-m-line-height} + (
          #{awsui.$space-scaled-xs} + #{awsui.$border-field-width} + #{awsui.$space-scaled-xxs}
        ) * 2
    );
  }

  > .item:not(:last-child) > .flash::before,
  > .item.flash::before {
    box-shadow: awsui.$shadow-flash-collapsed;
  }
}

.stack > .expanded.animation-running > .flash-list-item {
  position: relative;
  @include stacked-flash-z-index;
}

@mixin toggle-button-layout($top-overlap-collapsed, $border-width) {
  $margin-top-when-collapsed: -$top-overlap-collapsed;
  $line-height: awsui.$font-body-m-line-height;
  $padding-vertical: styles.$control-padding-vertical;
  $margin-top-when-expanded: -12px;

  padding-top: $padding-vertical;
  padding-bottom: $padding-vertical;

  &:not(.expanded) {
    margin-top: #{$margin-top-when-collapsed};
    margin-bottom: calc(
      #{-$margin-top-when-collapsed} - (#{$line-height} + 2 * (#{$padding-vertical} + #{$border-width}))
    );
  }

  &.expanded {
    margin-top: #{$margin-top-when-expanded};
    margin-bottom: calc(
      #{-$margin-top-when-expanded} - (#{$line-height} + 2 * (#{$padding-vertical} + #{$border-width}))
    );
  }
}

.stack > .notification-bar {
  @include styles.text-wrapping;

  background: awsui.$color-background-layout-toggle-default;
  border-color: awsui.$color-background-layout-toggle-default;
  border-radius: awsui.$border-radius-button;
  border-style: solid;
  box-shadow: awsui.$shadow-panel-toggle;
  color: awsui.$color-text-layout-toggle;
  cursor: pointer;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  grid-column: 2;
  grid-row: 2;
  column-gap: calc(#{awsui.$space-m} + #{awsui.$space-xxs});
  justify-content: center;
  letter-spacing: awsui.$font-button-letter-spacing;
  margin-left: auto;
  margin-right: auto;
  row-gap: 0;
  text-align: center;
  text-decoration: none;
  z-index: 1;

  > .status > .header,
  > .status > .item-count,
  > .button {
    @include typography.default-text-style;
    color: awsui.$color-text-layout-toggle;
    cursor: pointer;
    margin-top: 0;
    margin-bottom: 0;
    padding-top: 0;
    padding-bottom: 0;
  }

  > .status {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    column-gap: awsui.$space-m;
    justify-content: center;
    row-gap: 0;

    > .header {
      font-weight: awsui.$font-button-weight;
      display: inline-block;
    }

    > .item-count {
      column-gap: awsui.$space-s;
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: center;
      row-gap: 0;

      > .type-count > .count-number {
        margin-left: awsui.$space-xxs;
      }
    }
  }

  &:hover {
    background: awsui.$color-background-layout-toggle-hover;
    border-color: awsui.$color-background-layout-toggle-hover;
  }

  &:active {
    background: awsui.$color-background-layout-toggle-active;
  }

  &.visual-refresh {
    $border-width: 2px;
    // Amount of pixels that the element is pushed up to overlap the Flashbar (when collapsed)
    $top-overlap-collapsed: 27px;
    @include toggle-button-layout($top-overlap-collapsed, $border-width);
    border-width: $border-width;
    padding-left: awsui.$space-l;
    padding-right: awsui.$space-l;
  }

  &:not(.visual-refresh) {
    $border-width: 1px;
    // Amount of pixels that the element is pushed up to overlap the Flashbar (when collapsed)
    $top-overlap-collapsed: 24px;
    @include toggle-button-layout($top-overlap-collapsed, $border-width);
    border-width: $border-width;
    padding-left: awsui.$space-s;
    padding-right: awsui.$space-s;

    &:focus {
      text-decoration: none;
    }

    &:hover {
      text-decoration: none;
    }
  }

  > .button {
    display: inline-block;
    flex-grow: 1;
    background: none;
    border: 0 none;

    > .icon {
      @include styles.with-motion {
        transition: transform awsui.$motion-duration-rotate-90 awsui.$motion-easing-rotate-90;
      }
    }
    &.expanded > .icon {
      transform: rotate(180deg);
    }

    &:focus {
      outline: none;
    }

    @include focus-visible.when-visible {
      @include styles.focus-highlight(0px);
    }
  }
}

// Prevent the sticky Flashbar from reaching the end of the window by leaving some space below.
.stack.expanded:not(.floating) {
  // Default to 0 so that this does not apply to non-sticky Flashbar.
  padding-bottom: var(#{custom-props.$flashbarStickyBottomMargin}, 0);
}
