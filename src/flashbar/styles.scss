/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/
@use '../internal/generated/custom-css-properties/index.scss' as custom-props;
@use '../internal/hooks/focus-visible' as focus-visible;
@use '../internal/styles/tokens' as awsui;
@use '../internal/styles' as styles;
@use './motion';

.flashbar {
  position: relative;
}

.flashbar,
.flash {
  @include styles.styles-reset;
}

.flash {
  position: relative;
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  padding: awsui.$space-scaled-xs awsui.$space-flashbar-horizontal;
  @include styles.container-shadow;
  border-top: none;
  border-radius: awsui.$border-radius-flashbar;
  color: awsui.$color-text-notification-default;
  overflow-wrap: break-word;
  word-wrap: break-word;
}

.flash-refresh {
  box-shadow: none;
  &::before {
    content: '';
    position: absolute;
    z-index: -1;
    top: 0px;
    left: 0px;
    bottom: 0px;
    right: 0px;
    background-color: transparent;
    border-radius: awsui.$border-radius-flashbar;
    pointer-events: none;
    box-shadow: awsui.$shadow-flash-sticky;
  }
}

.flash-list {
  list-style: none;
  padding: 0;
  margin: 0;

  > li:not(:last-child) {
    margin-bottom: awsui.$space-xxxs;
  }
}

.flash-body {
  display: flex;
  flex-grow: 1;
  min-width: 0;

  &:focus {
    outline: none;
  }

  @include focus-visible.when-visible {
    @include styles.focus-highlight(awsui.$space-button-focus-outline-gutter);
  }
}

.flash-focus-container {
  display: flex;
  flex: 1;
  min-width: 0;
}

.flash-text {
  margin: awsui.$border-field-width 0;
  padding: awsui.$space-scaled-xxs awsui.$space-xxs;
}

.flash-icon {
  flex: 0 0 auto;
  padding-left: 0;
}

.flash-message {
  flex: 1 1 0%;
  @include styles.text-flex-wrapping;
}

.flash-header {
  font-weight: styles.$font-weight-bold;
}

.flash-content {
  /* Only used as a selector for test-utils */
}

.dismiss-button-wrapper {
  flex: 0 0 auto;
  margin-left: awsui.$space-s;
  margin-right: calc(-1 * #{awsui.$space-xxs});
  padding-right: awsui.$space-flashbar-dismiss-right;
}

.dismiss-button {
  /* Only used as a selector for test-utils */
}

.action-button-wrapper {
  white-space: nowrap;
  margin-left: awsui.$space-flashbar-action-left;
}

.flashbar.breakpoint-default > .flash-list > .flash-list-item > .flash > .flash-body {
  display: block;
  & > .action-button-wrapper {
    margin-left: awsui.$space-l;
    padding-left: awsui.$space-xxs;
    margin-bottom: awsui.$space-xxs;
  }
}

.action-button {
  /* Only used as a selector for test-utils */
}

.flash-type-success {
  background-color: awsui.$color-background-notification-green;
}

.flash-type-error {
  background-color: awsui.$color-background-notification-red;
}

.flash-type-warning {
  background-color: awsui.$color-background-notification-blue;
}

.flash-type-info {
  background-color: awsui.$color-background-notification-blue;
}

// `stackItems` feature beta test

.stack {
  display: grid;
  grid-template-columns: 1fr minmax(70px, auto) 1fr;
}

.stack > .expanded {
  grid-column: 1 / 4;
}

/*
The collapsed stack is a dynamic grid that creates the necessary number of 
rows and columns based on the number of items passed to CSS via the 
`flashbarStackDepth` custom property. Assuming there are three flashbar items, 
the grid layout will be: 

[item 1 start] [12px] [12px] [fractional unit] [12px] [12px] [item 1 end]
[12px] [item 2 start] [12px] [fractional unit] [12px] [item 2 end] [12px]
[12px] [12px] [item 3 start] [fractional unit] [item 3 end] [12px] [12px]
*/
.stack > .collapsed {
  display: grid;
  grid-column: 1 / 4;
  grid-template-columns:
    repeat(var(#{custom-props.$flashbarStackDepth}), 12px)
    1fr
    repeat(var(#{custom-props.$flashbarStackDepth}), 12px);
  row-gap: 8px;

  > .item {
    // Each item will have a unique custom property `flashbarStackIndex`
    // Add +1 is because the array is indexed at zero but grid positions are indexed at 1.
    grid-column-start: calc(var(#{custom-props.$flashbarStackIndex}) + 1);

    // Add +1 to include the fractional unit in the column count
    // Add +1 because the array indexed at zero but grid positions at indexed at 1.
    grid-column-end: calc(
      var(#{custom-props.$flashbarStackDepth}) * 2 + 1 - var(#{custom-props.$flashbarStackIndex}) + 1
    );
    grid-row-start: 1;
    grid-row-end: calc(var(#{custom-props.$flashbarStackIndex}) + 2);

    // The first item should have the highest z index than the second item, and so forth...
    z-index: calc(var(#{custom-props.$flashbarStackDepth}) - var(#{custom-props.$flashbarStackIndex}));
  }

  > .item:not(:first-of-type) {
    align-self: end;
  }

  &.visual-refresh > .item:not(:last-of-type) > .flash {
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  }

  &:not(.visual-refresh) > .item:not(:last-of-type) > .flash {
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.15);
  }

  &.visual-refresh > .item:not(:last-of-type) > .flash-items > li:first-child > .flash {
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  }

  &:not(.visual-refresh) > .item:not(:last-of-type) > .flash-items > li:first-child > .flash {
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.15);
  }
}

.stack > .toggle {
  grid-column: 2;
  grid-row: 2;

  @include focus-visible.when-visible {
    @include styles.focus-highlight(awsui.$space-button-focus-outline-gutter);
  }

  &.visual-refresh {
    background: awsui.$color-background-layout-toggle-default;
    border: none;
    border-radius: 0 0 10px 10px;
    box-shadow: awsui.$shadow-panel-toggle;
    color: awsui.$color-text-layout-toggle;
    cursor: pointer;
    padding: awsui.$space-scaled-xxs;
    z-index: var(#{custom-props.$flashbarStackDepth});

    &:focus {
      outline: none;
    }

    &:hover {
      background: awsui.$color-background-layout-toggle-hover;
    }

    &:active {
      background: awsui.$color-background-layout-toggle-active;
    }
  }

  &:not(.visual-refresh) {
    background: awsui.$color-background-button-normal-default;
    border: styles.$control-border-width solid awsui.$color-border-button-normal-default;
    border-radius: awsui.$border-radius-button;
    border-top: none;
    cursor: pointer;
    padding: styles.$control-padding-vertical awsui.$space-l;
    text-decoration: none;

    &:focus {
      outline: none;
      text-decoration: none;
    }

    &:hover {
      background: awsui.$color-background-button-normal-hover;
      border-color: awsui.$color-border-button-normal-hover;
      text-decoration: none;
    }

    &:active {
      background: awsui.$color-background-button-normal-active;
      border-color: awsui.$color-border-button-normal-active;
    }
  }

  > .icon {
    display: inline-block;

    @include styles.with-motion {
      transition: transform awsui.$motion-duration-rotate-90 awsui.$motion-easing-rotate-90;
    }

    &.expanded {
      transform: rotate(180deg);
    }
  }
}
