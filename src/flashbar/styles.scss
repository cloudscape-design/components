/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/
@use '../internal/generated/custom-css-properties/index.scss' as custom-props;
@use '../internal/styles/tokens' as awsui;
@use '../internal/styles' as styles;
@use './motion';

.flashbar {
  position: relative;
}
.flashbar,
.flash {
  @include styles.styles-reset;
}

.flash {
  position: relative;
  display: flex;
  justify-content: flex-start;
  align-items: flex-start;
  padding: awsui.$space-scaled-xs awsui.$space-flashbar-horizontal;
  @include styles.container-shadow;
  border-top: none;
  border-radius: awsui.$border-radius-flashbar;
  color: awsui.$color-text-notification-default;
  overflow-wrap: break-word;
  word-wrap: break-word;

  &:not(:last-child) {
    margin-bottom: awsui.$space-xxxs;
  }
}

.flash-refresh {
  box-shadow: none;
  &::before {
    content: '';
    position: absolute;
    z-index: -1;
    top: 0px;
    left: 0px;
    bottom: 0px;
    right: 0px;
    background-color: transparent;
    border-radius: awsui.$border-radius-flashbar;
    pointer-events: none;
    box-shadow: awsui.$shadow-flash-sticky;
  }
}

.flash-body {
  display: flex;
  flex-grow: 1;
  min-width: 0;
}

.flash-text {
  margin: awsui.$border-field-width 0;
  padding: awsui.$space-scaled-xxs awsui.$space-xxs;
}

.flash-icon {
  flex: 0 0 auto;
  padding-left: 0;
}

.flash-message {
  flex: 1 1 0%;
  @include styles.text-flex-wrapping;
}

.flash-header {
  font-weight: styles.$font-weight-bold;
}

.flash-content {
  /* Only used as a selector for test-utils */
}

.dismiss-button-wrapper {
  flex: 0 0 auto;
  margin-left: awsui.$space-s;
  margin-right: calc(-1 * #{awsui.$space-xxs});
  padding-right: awsui.$space-flashbar-dismiss-right;
}

.dismiss-button {
  /* Only used as a selector for test-utils */
}

.action-button-wrapper {
  white-space: nowrap;
  margin-left: awsui.$space-flashbar-action-left;
}
/* stylelint-disable selector-max-type */
.flashbar.breakpoint-default > div > .flash > .flash-body {
  display: block;
  & > .action-button-wrapper {
    margin-left: awsui.$space-xxs;
    margin-bottom: awsui.$space-xxs;
  }
}
/* stylelint-enable selector-max-type */

.action-button {
  /* Only used as a selector for test-utils */
}

.flash-type-success {
  background-color: awsui.$color-background-notification-green;
}

.flash-type-error {
  background-color: awsui.$color-background-notification-red;
}

.flash-type-warning {
  background-color: awsui.$color-background-notification-blue;
}

.flash-type-info {
  background-color: awsui.$color-background-notification-blue;
}

// `enableStackingOption` feature beta test

.details {
  /*
  The details stack element will be the first element in the AppLayout DOM for 
  non-mobile viewports requiring additional vertical space on top.
  In mobile viewports the appbar is lifted to the first position.
  */
  &.is-visual-refresh {
    @include styles.media-breakpoint-up(styles.$breakpoint-x-small) {
      margin-top: calc(#{awsui.$space-xxs} + 1px);
    }
  }

  /* 
  Safari needs the webkit prefix to remove the summary marker. All other 
  browsers use the list-style: none.
  */
  > .summary::-webkit-details-marker {
    display: none;
  }

  /*
  The stack summary is a dynamic grid that creates the necessary number of 
  rows and columns based on the number of items passed to CSS via the 
  `flashbarStackDepth` custom property.Assuming there are three flashbar items, 
  the grid layout will be: 

  [item 1 start] [12px] [12px] [fractional unit] [12px] [12px] [item 1 end]
  [12px] [item 2 start] [12px] [fractional unit] [12px] [item 2 end] [12px]
  [12px] [12px] [item 3 start] [fractional unit] [item 3 end] [12px] [12px]
  */
  > .summary {
    cursor: pointer;
    display: grid;
    list-style: none;

    /*
    The first row will be the item that persists when the details element is open. 
    Each subsequent row will render a dummy notification with no content that 
    will only be visible when the details is closed.
    */
    grid-template-columns:
      repeat(var(#{custom-props.$flashbarStackDepth}), 12px)
      1fr
      repeat(var(#{custom-props.$flashbarStackDepth}), 12px);
    row-gap: 8px;

    /*
    Each item will have a unique custom property `flashbarStackIndex` that is passed to CSS
    from the DOM via the map in JavaScript.
    */
    > .item {
      /*
      The +1 is because the array is indexed at zero but grid positions are indexed at 1.
      */
      grid-column-start: calc(var(#{custom-props.$flashbarStackIndex}) + 1);

      /*
      Add +1 to include the fractional unit in the column count and add + 1 because the array 
      is indexed at zero but grid positions at indexed at 1.
      */
      grid-column-end: calc(
        var(#{custom-props.$flashbarStackDepth}) * 2 + 1 - var(#{custom-props.$flashbarStackIndex}) + 1
      );
      grid-row-start: 1;
      grid-row-end: calc(var(#{custom-props.$flashbarStackIndex}) + 2);

      /*
      The first item should have the highest z index than the second item, and so forth...
      */
      z-index: calc(var(#{custom-props.$flashbarStackDepth}) - var(#{custom-props.$flashbarStackIndex}));
    }

    > .item:first-of-type > .flash > .content {
      display: flex;
      gap: 8px;
      padding: awsui.$space-scaled-xxs 0;
    }

    > .item:first-of-type > .flash > .content > .icon {
      transform: rotate(-90deg);

      @include styles.with-motion {
        transition: transform tokens.$motion-duration-rotate-90 tokens.$motion-easing-rotate-90;
      }
    }

    > .item:first-of-type > .flash > .content > .badge {
      background-color: awsui.$color-background-progress-bar-content-in-flash;
      color: awsui.$color-background-notification-blue;
    }

    > .item:not(:first-of-type) {
      align-self: end;
    }

    > .item:not(:last-of-type) > :first-child {
      box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
    }
  }

  &[open] {
    > .summary {
      margin-bottom: 2px;
    }

    > .summary > .item:first-of-type > .flash > .content > .icon {
      transform: rotate(0deg);
    }

    > .summary > .item:not(:last-of-type) > :first-child {
      box-shadow: none;
    }

    > .summary > .item:not(:first-of-type) {
      display: none;
    }
  }
}
