/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/

@use '../../internal/styles/' as styles;
@use '../../internal/styles/tokens' as awsui;
@use '../../internal/generated/custom-css-properties/index.scss' as custom-props;

.navigation-container {
  display: flex;
  grid-column: 1;
  grid-row: 1 / span 10;
  block-size: var(#{custom-props.$contentHeight});
  position: sticky;
  inset-block-start: var(#{custom-props.$offsetTop});
  z-index: 830;

  /*
  The navigation and tools containers (that contain the toggle buttons)
  stretch the full height of the app layout. Normally, this wouldn't be an
  issue because they sit above the app layout's content padding.

  But if disableContentPaddings is set to true and there are buttons on the
  left/right edges of the screen, they will be covered by the containers. So
  we need to disable pointer events in the container and re-enable them in
  the panels and toggle buttons.
  */
  pointer-events: none;

  @include styles.media-breakpoint-down(styles.$breakpoint-x-small) {
    inset-inline-start: 0;
    position: fixed;
    z-index: 1001;

    /*
    When disableBodyScroll is true the offsetTop will be relative to the 
    app layout and not the body. However, the drawer position changes 
    to fixed in mobile viewports. The top value needs to include the 
    header because fixed position switches the top value so it is now 
    relative to the body.
    */
    &.disable-body-scroll {
      inset-block-start: var(#{custom-props.$headerHeight});
    }
  }
}

nav.show-navigation {
  padding-block: awsui.$space-scaled-s;
  padding-inline: awsui.$space-layout-toggle-padding;

  // Animation for the buttons when they are added to the DOM
  @keyframes showButtons {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  &.is-navigation-open {
    display: none;
  }

  /*
  Apply the animation only in desktop viewports because the MobileToolbar will
  take control in responsive viewports.
  */
  @include styles.media-breakpoint-up(styles.$breakpoint-x-small) {
    &:not(.is-navigation-open) {
      display: block;
      &.animating {
        @include styles.with-motion {
          animation: showButtons awsui.$motion-duration-refresh-only-fast;
        }
      }
    }
  }
}

nav.navigation {
  background-color: awsui.$color-background-container-content;
  inset-block-end: 0;
  block-size: 100%;
  overflow-x: hidden;
  overflow-y: auto;
  /* stylelint-disable-next-line plugin/no-unsupported-browser-features */
  overscroll-behavior-y: contain;
  position: relative;
  word-wrap: break-word;
  pointer-events: auto;
  border-inline-end: solid awsui.$border-divider-section-width awsui.$color-border-divider-default;

  // Animation for the Navigation opacity and width when it is added to the DOM
  @keyframes openNavigation {
    from {
      opacity: 0;
      inline-size: calc(#{awsui.$space-layout-toggle-padding} * 2 + #{awsui.$space-layout-toggle-diameter});
    }

    to {
      opacity: 1;
      inline-size: var(#{custom-props.$navigationWidth});
    }
  }

  // All content is hidden by the overflow-x property
  &:not(.is-navigation-open) {
    inline-size: 0;
    // We need to hide the closed panel to make containing focusable elements not focusable anymore.
    display: none;
  }

  // Apply the animation when the Navigation is opened
  &.is-navigation-open {
    &.animating {
      @include styles.with-motion {
        animation: openNavigation awsui.$motion-duration-refresh-only-fast;
      }
    }
  }

  /*
  A non-semantic node is added with a fixed width equal to the final Navigation
  width. This will create the visual appearance of horizontal movement and
  prevent unwanted text wrapping.
  */
  > .animated-content {
    inline-size: var(#{custom-props.$navigationWidth});
  }

  // The Navigation drawer will take up the entire viewport on mobile
  @include styles.media-breakpoint-down(styles.$breakpoint-x-small) {
    #{custom-props.$navigationWidth}: 100vw;
  }
}

.hide-navigation {
  position: absolute;
  inset-inline-end: awsui.$space-m;
  inset-block-start: awsui.$size-vertical-panel-icon-offset;
}
