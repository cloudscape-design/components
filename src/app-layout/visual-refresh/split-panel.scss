/*
 Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 SPDX-License-Identifier: Apache-2.0
*/

@use '../../internal/styles/' as styles;
@use '../../internal/styles/tokens' as awsui;
@use '../../internal/generated/custom-css-properties/index.scss' as custom-props;

/*
When the Split Panel is in the bottom position it was share the same row
as the content area. This row is defined as 1 fractional unit which will
consume the remaining vertical space in the grid after the notifications
and breadcrumbs.
*/
section.split-panel-bottom {
  /*
  The align self property will position the split panel at the bottom of the grid row.
  This could be off the viewport if the content area has enough content to be scrollable.
  */
  align-self: end;
  bottom: var(#{custom-props.$footerHeight});
  display: none;
  grid-column: 1 / 6;
  grid-row: 10;
  height: auto;
  overflow-y: hidden;

  /*
  The position sticky will work in conjunction with the align self: end; property.
  If the grid row scrolls beyond the viewport, the sticky bottom position
  will lift it up above the footer so it is always visible.
  */
  position: sticky;
  z-index: 840;

  // Animation for the height when opening the split panel
  @keyframes openSplitPanelBottom {
    from {
      height: var(#{custom-props.$splitPanelReportedHeaderSize}, 0);
    }

    to {
      height: var(#{custom-props.$splitPanelReportedSize});
    }
  }

  // If the Layout is the scrollable element then the footer height is not relevant
  &.disable-body-scroll {
    bottom: 0;
  }

  &.is-navigation-open.position-bottom {
    grid-column-start: 2;
  }

  &.has-open-drawer.position-bottom {
    grid-column-end: 5;
  }

  /*
  Unlike the side position the Split Panel is persistent in the DOM
  when in the bottom position.
  */
  &.position-bottom {
    display: block;
  }

  /*
  Warning! This is a hack! The existing design token for the split panel
  shadow in the bottom position does not render in the refactored code.
  It appears to be related to the fact that the legacy split panel element
  has a height equal to the expanded height and a corresponding translation
  of the Y position so it is moved off the screen. This will need to be
  refactored with an adjustment to the split panel design token.
  */
  &:not(.is-split-panel-open).position-bottom {
    box-shadow: rgba(0, 7, 22, 0.1) 0px -32px 32px -24px;
  }

  /*
  When the data attribute changes indicating the Split Panel has been opened
  apply the animation to the height property.
  */
  &.is-split-panel-open.position-bottom {
    box-shadow: awsui.$shadow-split-bottom;
    &.animating {
      @include styles.with-motion {
        animation: openSplitPanelBottom awsui.$motion-duration-refresh-only-fast;
      }
    }
  }
}

section.split-panel-side {
  height: 100%;
  overflow-x: hidden;
  pointer-events: auto;

  &:not(.is-split-panel-open),
  &.position-bottom {
    width: 0;
  }

  /*
  The min and max widths are applied when the Split Panel is opened otherwise
  it would not be possible to animate the width and the box shadow would
  be persistent in the DOM when closed.
  */
  &.is-split-panel-open.position-side {
    box-shadow: awsui.$shadow-panel;
    max-width: var(#{custom-props.$splitPanelMaxWidth}, 280px);
    min-width: var(#{custom-props.$splitPanelMinWidth}, 280px);
  }
}
